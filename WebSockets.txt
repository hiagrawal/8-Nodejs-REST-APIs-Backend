Websockets and sockets.io
- Typically how we have done so for is client requests for data and we send the data. Fot this, we used http protocol. 
- How about if we have to send some data without the clinet requesting it
- lets say if we want to send some notifications
- or if user A and user B are chatting and user A has send some data that the user B doesn't know about so user B can not request
 but still we would be sending that data to user B with him requesting for it
- To achieve this, we use websockets. Websockets is a protocol established via http only

- if we google 'node websockets' or 'node express websockets', we get a lot of packages and one such common pkg is 
 socket.io
- socket.io is a package that uses websockets and gives us various convenient features around that protocol

Useful link: https://socket.io/docs/v4/

install socker io pkg : npm install --save socket.io

This needs to be installed on client side as well : npm install --save socket.io-client

Now on the server side, we set up a connection:
    const server = app.listen(8080);
    const io = require('socket.io')(server); 
    //socket io is built on websockets protocol which is built up on http so we passes server as an argument which is a http server
    //and we get couple of event listeners, one is to wait for new connections so whenever a client gets connected, everytime this gets fired
    io.on('connection', socket => {
        console.log('Client conneted!');
    })

and on the client side, we give the url to this connection:
- we import this first: import openSocket from 'socket.io-client';
- and then connect to the server where this socket.io is implemented: openSocket('http://localhost:8080');

- for some reason the default transportation method is not always allowed by all servers. 
- So specify a neutral transportation method at the client side, like this: { transports : ['websocket'] }

openSocket('http://localhost:8080', { transports : ['websocket'] });